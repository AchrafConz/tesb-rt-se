
package org.oasis_open.docs.ws_sx.ws_trust._200512.wsdl;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;

/**
 * This class was generated by Apache CXF 2.4.0-SNAPSHOT
 * 2011-01-06T10:25:02.193+02:00
 * Generated source version: 2.4.0-SNAPSHOT
 * 
 */
public final class SecurityTokenService_SecurityTokenServiceSOAP_Client {

    private static final QName SERVICE_NAME = new QName("http://docs.oasis-open.org/ws-sx/ws-trust/200512/wsdl", "SecurityTokenServiceProvider");

    private SecurityTokenService_SecurityTokenServiceSOAP_Client() {
    }

    public static void main(String args[]) throws Exception {
        URL wsdlURL = SecurityTokenServiceProvider.WSDL_LOCATION;
        if (args.length > 0) { 
            File wsdlFile = new File(args[0]);
            try {
                if (wsdlFile.exists()) {
                    wsdlURL = wsdlFile.toURI().toURL();
                } else {
                    wsdlURL = new URL(args[0]);
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }
      
        SecurityTokenServiceProvider ss = new SecurityTokenServiceProvider(wsdlURL, SERVICE_NAME);
        SecurityTokenService port = ss.getSecurityTokenServiceSOAP();  
        
        {
        System.out.println("Invoking keyExchangeToken...");
        org.oasis_open.docs.ws_sx.ws_trust._200512.RequestSecurityTokenType _keyExchangeToken_request = null;
        org.oasis_open.docs.ws_sx.ws_trust._200512.RequestSecurityTokenResponseType _keyExchangeToken__return = port.keyExchangeToken(_keyExchangeToken_request);
        System.out.println("keyExchangeToken.result=" + _keyExchangeToken__return);


        }
        {
        System.out.println("Invoking issue...");
        org.oasis_open.docs.ws_sx.ws_trust._200512.RequestSecurityTokenType _issue_request = null;
        org.oasis_open.docs.ws_sx.ws_trust._200512.RequestSecurityTokenResponseCollectionType _issue__return = port.issue(_issue_request);
        System.out.println("issue.result=" + _issue__return);


        }
        {
        System.out.println("Invoking cancel...");
        org.oasis_open.docs.ws_sx.ws_trust._200512.RequestSecurityTokenType _cancel_request = null;
        org.oasis_open.docs.ws_sx.ws_trust._200512.RequestSecurityTokenResponseType _cancel__return = port.cancel(_cancel_request);
        System.out.println("cancel.result=" + _cancel__return);


        }
        {
        System.out.println("Invoking validate...");
        org.oasis_open.docs.ws_sx.ws_trust._200512.RequestSecurityTokenType _validate_request = null;
        org.oasis_open.docs.ws_sx.ws_trust._200512.RequestSecurityTokenResponseType _validate__return = port.validate(_validate_request);
        System.out.println("validate.result=" + _validate__return);


        }
        {
        System.out.println("Invoking requestCollection...");
        org.oasis_open.docs.ws_sx.ws_trust._200512.RequestSecurityTokenCollectionType _requestCollection_requestCollection = null;
        org.oasis_open.docs.ws_sx.ws_trust._200512.RequestSecurityTokenResponseCollectionType _requestCollection__return = port.requestCollection(_requestCollection_requestCollection);
        System.out.println("requestCollection.result=" + _requestCollection__return);


        }
        {
        System.out.println("Invoking renew...");
        org.oasis_open.docs.ws_sx.ws_trust._200512.RequestSecurityTokenType _renew_request = null;
        org.oasis_open.docs.ws_sx.ws_trust._200512.RequestSecurityTokenResponseType _renew__return = port.renew(_renew_request);
        System.out.println("renew.result=" + _renew__return);


        }

        System.exit(0);
    }

}
