
/*
 * 
 */

package org.sopera.services.crmservice;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.4.0-SNAPSHOT
 * 2011-01-17T11:54:14.927+02:00
 * Generated source version: 2.4.0-SNAPSHOT
 * 
 */


@WebServiceClient(name = "CRMServiceProvider", 
                  wsdlLocation = "CRMService.wsdl",
                  targetNamespace = "http://services.sopera.org/CRMService") 
public class CRMServiceProvider extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://services.sopera.org/CRMService", "CRMServiceProvider");
    public final static QName Localhost = new QName("http://services.sopera.org/CRMService", "localhost");
    static {
        URL url = null;
        try {
            url = new URL("CRMService.wsdl");
        } catch (MalformedURLException e) {
            System.err.println("Can not initialize the default wsdl from CRMService.wsdl");
            // e.printStackTrace();
        }
        WSDL_LOCATION = url;
    }

    public CRMServiceProvider(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public CRMServiceProvider(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public CRMServiceProvider() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public CRMServiceProvider(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public CRMServiceProvider(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public CRMServiceProvider(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns CRMService
     */
    @WebEndpoint(name = "localhost")
    public CRMService getLocalhost() {
        return super.getPort(Localhost, CRMService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CRMService
     */
    @WebEndpoint(name = "localhost")
    public CRMService getLocalhost(WebServiceFeature... features) {
        return super.getPort(Localhost, CRMService.class, features);
    }

}
